library IEEE;
use IEEE.std_logic_1164.ALL;
use IEEE.std_logic_arith.ALL;
use IEEE.std_logic unsigned.ALL;

entity corre is
		Port ( reloj : in STD_LOGIC;
				display1, display2, display3, display4 : inout std logic vector (6 downto 0));
				
			display5, display6, display7, display8 : inout std logic vector (6 downto 0));
end corre;

architecture Behavioral of corre is
signal segundo : std_logic;
signal Q : std_logic_vector (2 downto 0);
begin

divisor: process (reloj)
variable cuenta: std_logic_vector(27 downto 0) := X"0000000";

begin
	if rising_edge (reloj) then
	if cuenta =X"48009E0" then
	cuenta := X"0000000";
	else
	cuenta := cuenta+1;
	end if; 
end if;
end process;

contador: process (segundo)
variable cuenta: std_logic_vector(2 downto 0) := "000";
begin
	if rising edge (segundo) then
	cuenta:= cuenta + 1;
end if;
	Q <= cuenta;
end process;

with  Q select--mensaje
display1 <= "1000111" wehn "000", --r
				"1000111" wehn "000",--i
				"1000111" wehn "000",--c
				"1000111" wehn "000",--a
				"1000111" wehn "000",--r
				"1000111" wehn "000",--d
				"1000111" wehn "000",--o
				"1111111" wehn others; --0

FF1: process (segundo)
begin
	if rising edge (segundo) then 
	display 2 <= display1;
	end if; 
end process;

FF2: process (segundo)
begin
	if rising edge (segundo) then 
	display3 <= display2;
	end if; 
end process;

FF3: process (segundo)
begin
	if rising edge (segundo) then 
	display4 <= display3;
	end if; 
end process;

FF4: process (segundo)
begin
	if rising edge (segundo) then 
	display5 <= display4;
	end if; 
end process;

FF5: process (segundo)
begin
	if rising edge (segundo) then 
	display6 <= display5;
	end if; 
end process;

FF6: process (segundo)
begin
	if rising edge (segundo) then 
	display7 <= display6;
	end if; 
end process;

FF7: process (segundo)
begin
	if rising edge (segundo) then 
	display8 <= display7;
	end if; 
end process;

end Behavioral;